// Generated by CoffeeScript 1.7.1
var data1, data2, data3, data4, data5, data6, generatePDF, incomeFrequency, incomeInfo, incomeType, studentInfo, test;

data1 = {
  'eligibility': {
    'type': 'financial'
  },
  'parent': {
    'parentFirstName': 'Jatin',
    'parentLastName': 'Frost',
    'email': '',
    'phone': '',
    'address': '',
    'city': '',
    'state': null,
    'zipCode': '',
    'income': [
      {
        'type': 'external',
        'amount': '100',
        'frequency': 'weekly'
      }
    ]
  },
  'children': [
    {
      'FirstName': 'Mat',
      'MiddleName': 'R',
      'LastName': 'Frost',
      'student': true,
      'foster': false,
      'homeless': false,
      'migrant': false,
      'runaway': false,
      'headStart': false,
      'income': {
        'amount': '0',
        'frequency': 'weekly'
      }
    }
  ],
  'program': {
    'participates': false,
    'caseNumber': null
  },
  'adults': [],
  'earner': {
    'name': 'Jatin Frost',
    'ssn': '1234'
  },
  'signature': 'Jatin Frost'
};

data2 = {
  'eligibility': {
    'type': 'childStatus'
  },
  'parent': {
    'parentFirstName': 'Jatin',
    'parentLastName': 'Frost',
    'email': 'jat-frost@geocities.com',
    'phone': '669-221-6251',
    'address': '6087 Pleasant Forest Line',
    'city': 'Tin City',
    'state': 'NH',
    'zipCode': '03672'
  },
  'children': [
    {
      'FirstName': 'Mat',
      'MiddleName': 'R',
      'LastName': 'Frost',
      'student': true,
      'foster': false,
      'homeless': false,
      'migrant': true,
      'runaway': false,
      'headStart': false,
      'income': {
        'amount': '0',
        'frequency': 'weekly'
      }
    }
  ],
  'adults': null,
  'program': {
    'participates': false,
    'caseNumber': null
  },
  'earner': null,
  'signature': 'Jatin Frost'
};

data3 = {
  'eligibility': {
    'type': 'financial'
  },
  'parent': {
    'parentFirstName': 'Jatin',
    'parentLastName': 'Frost',
    'email': '',
    'phone': '',
    'address': '',
    'city': '',
    'state': null,
    'zipCode': '',
    'income': [
      {
        'type': 'external',
        'amount': '100',
        'frequency': 'weekly'
      }
    ]
  },
  'children': [
    {
      'FirstName': 'Mat',
      'MiddleName': 'R',
      'LastName': 'Frost',
      'student': true,
      'foster': false,
      'homeless': false,
      'migrant': false,
      'runaway': false,
      'headStart': false,
      'income': {
        'amount': '0',
        'frequency': 'weekly'
      }
    }, {
      'FirstName': 'Arland',
      'MiddleName': null,
      'LastName': 'Frost',
      'student': true,
      'foster': false,
      'homeless': false,
      'migrant': false,
      'runaway': false,
      'headStart': false,
      'income': {
        'amount': '0',
        'frequency': 'weekly'
      }
    }
  ],
  'program': {
    'participates': false,
    'caseNumber': null
  },
  'adults': [],
  'earner': {
    'name': 'Jatin Frost',
    'ssn': '1234'
  },
  'signature': 'Jatin Frost'
};

data4 = {
  'eligibility': {
    'type': 'financial'
  },
  'parent': {
    'parentFirstName': 'Jatin',
    'parentLastName': 'Frost',
    'email': '',
    'phone': '',
    'address': '',
    'city': '',
    'state': null,
    'zipCode': '',
    'income': [
      {
        'type': 'external',
        'amount': '100',
        'frequency': 'weekly'
      }
    ]
  },
  'children': [
    {
      'FirstName': 'Mat',
      'MiddleName': 'R',
      'LastName': 'Frost',
      'student': true,
      'foster': false,
      'homeless': false,
      'migrant': false,
      'runaway': false,
      'headStart': false,
      'income': {
        'amount': '0',
        'frequency': 'weekly'
      }
    }
  ],
  'program': {
    'participates': false,
    'caseNumber': null
  },
  'adults': [
    {
      'FirstName': 'Mary',
      'LastName': 'Frost',
      'income': [
        {
          'type': 'job',
          'amount': '3000',
          'frequency': 'monthly'
        }, {
          'type': 'external',
          'amount': '100',
          'frequency': 'weekly'
        }
      ]
    }, {
      'FirstName': 'Selena',
      'LastName': 'Frost',
      'income': []
    }
  ],
  'earner': {
    'name': 'Jatin Frost',
    'ssn': '1234'
  },
  'signature': 'Jatin Frost'
};

data5 = {
  'eligibility': {
    'type': 'assistance'
  },
  'parent': {
    'parentFirstName': 'Jatin',
    'parentLastName': 'Frost',
    'email': 'jat-frost@geocities.com',
    'phone': '',
    'address': '',
    'city': '',
    'state': null,
    'zipCode': ''
  },
  'children': [
    {
      'FirstName': 'Mat',
      'MiddleName': 'R',
      'LastName': 'Frost',
      'student': true,
      'foster': false,
      'homeless': false,
      'migrant': false,
      'runaway': false,
      'headStart': false
    }, {
      'FirstName': 'Arland',
      'MiddleName': null,
      'LastName': 'Frost',
      'student': true,
      'foster': false,
      'homeless': false,
      'migrant': false,
      'runaway': false,
      'headStart': false
    }
  ],
  'program': {
    'participates': true,
    'caseNumber': '1234567890ABCEDF'
  },
  'adults': null,
  'earner': null,
  'signature': 'Jatin Frost'
};

data6 = {
  'eligibility': {
    'type': 'financial'
  },
  'parent': {
    'parentFirstName': 'Jatin',
    'parentLastName': 'Frost',
    'email': '',
    'phone': '',
    'address': '',
    'city': '',
    'state': null,
    'zipCode': '',
    'income': [
      {
        'type': 'external',
        'amount': '100',
        'frequency': 'weekly'
      }
    ]
  },
  'children': [
    {
      'FirstName': 'Mat',
      'MiddleName': 'R',
      'LastName': 'Frost',
      'student': true,
      'foster': false,
      'homeless': false,
      'migrant': false,
      'runaway': false,
      'headStart': false,
      'income': {
        'amount': '0',
        'frequency': 'weekly'
      }
    }
  ],
  'program': {
    'participates': false,
    'caseNumber': null
  },
  'adults': [],
  'earner': null,
  'signature': 'Jatin Frost'
};

generatePDF = function(data) {
  var a, address, arr, c, d, householdSize, i, proposedEligibility, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
  arr = [];
  arr.push({
    text: 'National School Lunch Program Application',
    style: 'header'
  });
  proposedEligibility = data.eligibility.type;
  if (data.children[0].income.amount !== '') {
    proposedEligibility = 'Financial Need';
  } else if (data.program.participates === true) {
    proposedEligibility = 'Assistance Program Participation';
  } else {
    proposedEligibility = 'Status of Child(ren)';
  }
  arr.push({
    text: 'Proposed Categorical Eligibility: ' + proposedEligibility + '\r\n',
    style: 'normal'
  });
  arr.push({
    text: 'Parent Contact Information',
    style: 'subheader'
  });
  arr.push({
    text: 'Name: ' + data.parent.parentFirstName + ' ' + data.parent.parentLastName,
    style: 'tabbed'
  });
  if (data.parent.email !== '') {
    arr.push({
      text: 'Email: ' + data.parent.email,
      style: 'tabbed'
    });
  }
  if (data.parent.phone !== '') {
    arr.push({
      text: 'Phone Number: ' + data.parent.phone,
      style: 'tabbed'
    });
  }
  address = '';
  if (data.parent.address !== '') {
    address = data.parent.address;
  }
  if (data.parent.city !== '') {
    address += ', ' + data.parent.city;
  }
  if (data.parent.state !== null) {
    address += ', ' + data.parent.state + ' ' + data.parent.zipCode;
  }
  if (address !== '') {
    arr.push({
      text: 'Address: ' + address + '\r\n',
      style: 'tabbed'
    });
  }
  arr.push({
    text: 'Student Information',
    style: 'subheader'
  });
  _ref = data.children;
  for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
    c = _ref[i];
    if (c.student === true) {
      arr.push({
        text: studentInfo(c.student, i) + '\r\n',
        style: 'tabbed'
      });
    }
  }
  arr.push({
    text: '\r\n',
    style: 'normal'
  });
  if (proposedEligibility === 'Assistance Program Participation') {
    arr.push({
      text: 'Assistance Program Information',
      style: 'subheader'
    });
    arr.push({
      text: '\t Case Number: ' + data.program.caseNumber + '\r\n',
      style: 'normal'
    });
  }
  if (proposedEligibility === 'Financial Need') {
    arr.push({
      text: 'Income Information',
      style: 'subheader'
    });
    householdSize = 1 + data.children.length + data.adults.length;
    arr.push({
      text: 'Total Number of Household Members: ' + householdSize,
      style: 'normal'
    });
    arr.push({
      text: incomeInfo(data.parent),
      style: 'normal'
    });
    _ref1 = data.children;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      c = _ref1[_j];
      arr.push({
        text: incomeInfo(c),
        style: 'normal'
      });
    }
    _ref2 = data.adults;
    for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
      a = _ref2[_k];
      arr.push({
        text: incomeInfo(a),
        style: 'normal'
      });
    }
    if (data.earner !== null) {
      arr.push({
        text: 'SSN Information (last 4 digits) \r\n \t' + data.earner.name + ' - ' + data.earner.ssn,
        style: 'normal'
      });
    }
    arr.push({
      text: '\r\n',
      style: 'normal'
    });
  }
  arr.push({
    text: 'Electronic Signature',
    style: 'subheader'
  });
  d = new Date;
  arr.push({
    text: 'Completed and Signed by: ' + data.signature + '\r\n Submission Date: ' + d.getMonth + '/' + d.getDate + '/' + d.getFullYear,
    style: 'normal'
  });
  return arr;
};

studentInfo = function(student, i) {
  var studentName, studentType;
  studentType = '';
  studentName = '\t' + i + '. ' + student.FirstName + ' ';
  if (student.MiddleName !== '') {
    studentName += student.MiddleName + '. ';
  }
  studentName += student.LastName + ' ';
  if (student.foster === true || student.homeless === true || student.runaway === true || student.migrant === true || student.headStart === true) {
    studentType = '(';
    if (student.foster === true) {
      studentType += 'Foster/';
    }
    if (student.homeless === true) {
      studentType += 'Homeless/';
    }
    if (student.runaway === true) {
      studentType += 'Runaway/';
    }
    if (student.migrant === true) {
      studentType += 'Migrant/';
    }
    if (student.headStart === true) {
      studentType += 'Head Start/';
    }
    studentType += ')';
    studentType.replace('/)', ')');
  }
  return studentName + studentType;
};

incomeInfo = function(person) {
  var i, personIncome, personName, _i, _len, _ref;
  if (person === data.parent) {
    personName = '\t' + person.parentFirstName + ' ' + person.parentLastName + '\r\n';
  } else {
    personName = '\t' + person.FirstName + ' ' + person.LastName + '\r\n';
  }
  personIncome = '';
  if (person.income !== null && person.income !== []) {
    personIncome = 'No Income';
  } else {
    _ref = person.income;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      i = _ref[_i];
      personIncome += '\t \t' + incomeType(i.type) + ': $' + i.amount + '(' + i.frequency + ') \r\n';
    }
  }
  return personName + personIncome;
};

incomeType = function(type) {
  var source;
  switch (type) {
    case 'job':
      source = 'Salary/Wages';
      break;
    case 'external':
      source = 'Public Assistance/Child Support/Alimony';
      break;
    case 'other':
      source = 'Pension/Retirement/Other';
      break;
    default:
      source = '';
  }
  return source;
};

incomeFrequency = function(frequency) {
  var sourceFreq;
  switch (frequency) {
    case 'weekly':
      sourceFreq = 'Weekly';
      break;
    case 'biweekly':
      sourceFreq = 'Every Two Weeks';
      break;
    case 'semimonthly':
      sourceFreq = 'Twice a Month';
      break;
    case 'monthly':
      sourceFreq = 'Monthly';
      break;
    case 'annually':
      sourceFreq = 'Annually';
      break;
    default:
      sourceFreq = '';
  }
  return sourceFreq;
};

test = function(caseNumber) {
  var cases;
  cases = [data1, data2, data3, data4, data5, data6];
  return $.ajax({
    url: baseURL + 'form-submit.json',
    method: 'POST',
    contentType: 'application/json;charset=UTF-8',
    data: JSON.stringify(generatePDF(cases[caseNumber])),
    dataType: 'json'
  }).done(function(data) {
    return console.log('Test Case Passed', data);
  }).error(function(xhr, error) {
    return console.log('Error Occurred on Test Case', error);
  });
};
